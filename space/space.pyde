import java.lang.RuntimeException
import time, os
from vectors import *

FPS = 75
upscale = 0.5
timeScale = 1
screenshotUpscale = 2.5
screenshotRes = (3840, 2160)
camera = Obj3d(v3(2, 1, 0), v2(0, 0))
player = Player3d(v3(0, 1, 0), v3(0, 0, 0))
mode = "camera"

if not os.path.isdir("gen"):
    os.mkdir("gen")

class Key: pass
for i in range(65, 91):
    setattr(Key,     chr(i), i)
for i in range(48, 58):
    setattr(Key, '_'+chr(i), i)
Key.SPACE = 32
Key.SHIFT = 16
Key.CTRL  = 17
Key.LEFT  = 37
Key.UP    = 38
Key.RIGHT = 39
Key.DOWN  = 40

shaderReloadTime = 0
canMoveCameraAngle = True
shade = None
keys = {}

tmp_shader_name = str(sketchPath("gen/SHADER_COMPILED.glsl"))

def rot_XZ(p, r):
    return v3(p.x*cos(r)-p.z*sin(r), p.y, p.x*sin(r)+p.z*cos(r))
def rot_YZ(p, r):
    return v3(p.x, p.y*cos(r)-p.z*sin(r), p.y*sin(r)+p.z*cos(r))

def hasKey(key):
    global keys
    return key in keys and keys[key]

def create_main_shader(file_name=tmp_shader_name, shader_list_file="file_list.txt"):
    with open(shader_list_file) as f:
        shader_list = ['./data/{}'.format(i.strip()) for i in f.readlines() if i.strip()]
    
    with open(file_name, 'w') as f:
        f.write("// This is an AUTOGENERATED file, do not edit!\n\n\n\n")
        for shade_name in shader_list:
            f.write("////////// {} //////////\n\n".format(shade_name))
            with open(shade_name, 'r') as part:
                f.write(part.read() + '\n\n')

def sendPara(shade):
    shade.set("u_resolution", float(width), float(height))
    shade.set("u_time", 0.001 * timeScale * millis())
    
    shade.set("vp_ang", *camera.ang)
    shade.set("vp_loc", *camera.loc)
    shade.set("play_ang", *player.ang)
    shade.set("play_loc", *player.loc)

def setup():
    global buffer, upscale, mouse_pos
    # fullScreen(P2D)
    size(1280, 720, P2D)
    
    mouse_pos = v2(width / 2, height / 2)
    frameRate(FPS)
    buffer = createGraphics(int(width * upscale), int(height * upscale), P2D)

def draw():
    global shade, vp_loc, vp_ang, shaderReloadTime
    
    if millis() >= shaderReloadTime:
        shaderReloadTime = millis() + 1000
        try:
            create_main_shader()
            shade_temp = loadShader(tmp_shader_name)
            shade_temp.create()
            shade_temp.compile()
            if len(shade_temp.fragmentShaderSource) <= 12:
                raise java.lang.RuntimeException("Shader too short to compile.")
            shade = loadShader(tmp_shader_name)
            shade.set("u_resolution", float(width), float(height))
        except java.lang.RuntimeException as err:
            print("Error compiling shader! {}".format(err))
            return
        
        print("Sucessfully compiled shader!")
    
    if not shade:
        return
    
    if canMoveCameraAngle:
        mouse_pos.add(v2(mouseX - pmouseX, mouseY - pmouseY))
        mouse_pos.y = constrain(mouse_pos.y, 0, height)
        camera.ang = v2(
            map(mouse_pos.x, 0, width , -PI, PI),
            map(mouse_pos.y, 0, height, -PI / 2.0, PI / 2.0))
    
    if mode == "camera":    
        moveVec = v3(0, 0, 0)
        if hasKey(Key.W):
            moveVec.add(v3( 0,  0, -1))
        if hasKey(Key.S):
            moveVec.add(v3( 0,  0,  1))
        if hasKey(Key.A):
            moveVec.add(v3(-1,  0,  0))
        if hasKey(Key.D):
            moveVec.add(v3( 1,  0,  0))
        moveVec = rot_XZ(rot_YZ(moveVec, -camera.ang.y), camera.ang.x)
        if hasKey(Key.SPACE):
            moveVec.add(v3( 0,  1,  0))
        if hasKey(Key.SHIFT):
            moveVec.add(v3( 0, -1,  0))
        camera.loc.add(moveVec.setMag((25.0 if hasKey(Key.CTRL) else 5.0) / frameRate))
    elif mode == "player":
        if hasKey(Key.RIGHT):
            player.ang_vel.x += 0.025
        if hasKey(Key.LEFT):
            player.ang_vel.x -= 0.025
        if hasKey(Key.UP):
            player.ang_vel.z += 0.025
        if hasKey(Key.DOWN):
            player.ang_vel.z -= 0.025
        if hasKey(Key.D):
            player.ang_vel.y += 0.025
        if hasKey(Key.A):
            player.ang_vel.y -= 0.025
        
        if hasKey(Key.W):
            player.loc_vel.add(rot_XZ(rot_YZ(v3(0, 0,  0.01), -player.ang.y), player.ang.x))
        if hasKey(Key.S):
            player.loc_vel.add(rot_XZ(rot_YZ(v3(0, 0, -0.01), -player.ang.y), player.ang.x))
    
    player.loc.add(player.loc_vel)
    
    def rotAxis(p, axis, PYR):
        j = list(dirToAng(axis))
        p = rotate3d(p, v3(*(j + [PYR.x])))
        p = rotate3d(p, v3(*(j + [PYR.y])))
        p = rotate3d(p, v3(*(j + [PYR.z])))
        return p
    
    axis_x = rotAxis(v3(1, 0, 0), v3(0, 0, 1), player.ang)
    axis_y = rotAxis(v3(0, 1, 0), v3(0, 0, 1), player.ang)
    axis_z = rotAxis(v3(0, 0, 1), v3(0, 0, 1), player.ang)
    
    player.ang = rotate3d(player.ang, v3(*(list(dirToAng(axis_x)) + [player.ang_vel.x])))
    player.ang = rotate3d(player.ang, v3(*(list(dirToAng(axis_y)) + [player.ang_vel.y])))
    player.ang = rotate3d(player.ang, v3(*(list(dirToAng(axis_z)) + [player.ang_vel.z])))
    
    player.ang.add(player.ang_vel)
    player.loc_vel.mult(0.75)
    player.ang_vel.mult(0.75)
    
    sendPara(shade)
    buffer.filter(shade)
    
    image(buffer, 0, 0, width, height)
    fill(255, 0, 0)
    text("FPS: {}\nCamera: {}\nPlayer: {}".format(frameRate, camera, player), 0, 10)
    
def keyPressed():
    global keys, mode, camera
    keys[keyCode] = True
    if hasKey(Key.R):
        camera.loc = v3(0, 0, 0)
        player.loc = v3(0, 1, 0)
    elif hasKey(Key.Q):
        mode = ("camera", "player")[mode == "camera"]

def keyReleased():
    global keys, vp_loc
    if hasKey(Key.P):
        newBuf = createGraphics(
            int(screenshotUpscale * screenshotRes[0]),
            int(screenshotUpscale * screenshotRes[0]),
            P2D)
        
        newBuf.beginDraw()
        newBuf.endDraw()
        sendPara(shade)
        newBuf.filter(shade)
        
        finalBuf = createGraphics(screenshotRes[0], screenshotRes[1], P2D)
        finalBuf.beginDraw()
        finalBuf.image(newBuf, 0, 0, screenshotRes[0], screenshotRes[1])
        finalBuf.save("gen/screenshot_{}.png".format(int(1000 * time.time())))
        finalBuf.endDraw()
        print("Screenshot saved!")
    keys[keyCode] = False

def mouseClicked():
    global canMoveCameraAngle
    if mouseButton == CENTER:
        canMoveCameraAngle = not canMoveCameraAngle
        print("canMoveCameraAngle = " + str(canMoveCameraAngle))