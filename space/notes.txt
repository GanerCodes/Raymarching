https://ganer.xyz/s/795a877d39656bf7
    Find P's by finding when |ray_step| < MCR
    
    // Properties of "void"
    pos = start_pos
    total_density = 0
    total_clr = (0, 0, 0)
    
    // Alg
    (density, clr) at each point P:
        total_clr = mix(
            total_clr, clr,
            (1 - total_density) * min(1, density * distance(pos, P)))
        pos = P
        total_density += density
        if total_density > 0.99:
            return

SDF temp:
vec4 object_name(vec3 p, bool dist) {
    float v = sdf_sphere(p, 0.5);
    
    float c = v;
    if(dist) return vec4(c);
    
    if(v <= MCR) {
        return vec4(0.0, 1.0, 1.0, 0.0);
    }
    return vec4(0.0);
}

axies:
    (1, 0, 0) apply p_rot = LOC
    (0, 1, 0) apply p_rot
    (0, 0, 1) apply p_rot
AN = apply p_rot_vel on axies

M(rot) applies rotation matrix rot to axies.
find rot such that M(rot) == AN


vars:
    facing
Loc: (0, 1, 0)
Rot 1: facing direction - rotate sphere around under [XZ]
Rot 2: foward direction - rotate around perpendicular (+ 1/2π) to facing direction
Rot 3: side   direction - rotate around facing direction <cos(facing), sin(facing), 0>




How to rotate point P by ζ degrees around line θ, φ

0. Consider line:
    a. Init line as X axis
    b. Rotate XY by θ
    c. Rotate XZ by φ

1. Align point P:
    a. Rotate P along XZ by -φ
    b. Rotate P along XY by -θ

2. Rotate P along line axis:
    a. Rotate P along YZ by ζ

3. Reverse alignment transformation:
    a. Rotate P along XY by θ
    b. Rotate P along XZ by φ